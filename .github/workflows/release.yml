name: Release Workflow

on:
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

jobs:
  test-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run tests
        run: go test -v ./...

      - name: Check for version update in commit
        id: check_version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -E 'update version to|bump version|version:'; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}')
            if [ ! -z "$VERSION" ]; then
              echo "has_version_update=true" >> $GITHUB_OUTPUT
              echo "commit_version=$VERSION" >> $GITHUB_OUTPUT
              echo "Found version update in commit: $VERSION"
            fi
          else
            echo "has_version_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version in code from commit
        if: steps.check_version.outputs.has_version_update == 'true'
        id: update_from_commit
        run: |
          VERSION=${{ steps.check_version.outputs.commit_version }}
          CURRENT_VERSION=$(grep -oE 'Version = "v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}"' tool.go | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}' || echo "")
          
          echo "Current version in code: $CURRENT_VERSION"
          echo "Version from commit: $VERSION"
          
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            sed -i "s/Version = \".*\"/Version = \"$VERSION\"/" tool.go
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add tool.go
            git commit -m "Update version to $VERSION [skip ci]"
            git push
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "Version updated to $VERSION"
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "Version is already up to date"
          fi

      - name: Check if latest commit has a tag
        id: check_tag
        run: |
          LATEST_COMMIT=$(git rev-parse HEAD)
          TAG_AT_COMMIT=$(git tag --points-at $LATEST_COMMIT)
          
          if [ -z "$TAG_AT_COMMIT" ]; then
            echo "has_tag=false" >> $GITHUB_OUTPUT
          else
            echo "has_tag=true" >> $GITHUB_OUTPUT
            echo "tag=$TAG_AT_COMMIT" >> $GITHUB_OUTPUT
            echo "Found tag at current commit: $TAG_AT_COMMIT"
          fi

      - name: Get current date
        id: date
        if: steps.check_version.outputs.has_version_update != 'true' && steps.check_tag.outputs.has_tag != 'true'
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: latest_tag
        if: steps.check_version.outputs.has_version_update != 'true' && steps.check_tag.outputs.has_tag != 'true'
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "tag=v0.0.0" >> $GITHUB_OUTPUT
          else
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi
          
          echo "Latest tag: $LATEST_TAG"

      - name: Create new tag
        id: new_tag
        if: steps.check_version.outputs.has_version_update != 'true' && steps.check_tag.outputs.has_tag != 'true'
        run: |
          LATEST_TAG=${{ steps.latest_tag.outputs.tag }}
          DATE=${{ steps.date.outputs.date }}
          
          # Extract version components
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH-$DATE"
            
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "New tag: $NEW_TAG"
          else
            NEW_TAG="v0.0.1-$DATE"
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "New tag: $NEW_TAG"
          fi

      - name: Update version in code (no tag)
        id: update_version
        if: steps.check_version.outputs.has_version_update != 'true' && steps.check_tag.outputs.has_tag != 'true'
        run: |
          NEW_TAG=${{ steps.new_tag.outputs.new_tag }}
          CURRENT_VERSION=$(grep -oE 'Version = "v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}"' tool.go | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}' || echo "")
          
          echo "Current version in code: $CURRENT_VERSION"
          echo "New version: $NEW_TAG"
          
          if [ "$CURRENT_VERSION" != "$NEW_TAG" ]; then
            sed -i "s/Version = \".*\"/Version = \"$NEW_TAG\"/" tool.go
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add tool.go
            git commit -m "Update version to $NEW_TAG"
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "Version updated to $NEW_TAG"
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "Version is already up to date"
          fi

      - name: Update version in code (with tag)
        id: update_version_with_tag
        if: steps.check_version.outputs.has_version_update != 'true' && steps.check_tag.outputs.has_tag == 'true'
        run: |
          TAG=${{ steps.check_tag.outputs.tag }}
          CURRENT_VERSION=$(grep -oE 'Version = "v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}"' tool.go | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}' || echo "")
          
          echo "Current version in code: $CURRENT_VERSION"
          echo "Tag version: $TAG"
          
          if [ "$CURRENT_VERSION" != "$TAG" ]; then
            # 删除旧标签
            git tag -d $TAG
            git push origin :refs/tags/$TAG
            
            # 更新版本号
            sed -i "s/Version = \".*\"/Version = \"$TAG\"/" tool.go
            
            # 提交更改
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add tool.go
            git commit -m "Update version to $TAG"
            
            # 在新提交上创建标签
            git tag $TAG
            
            # 推送更改和标签
            git push
            git push origin $TAG
            
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "Version updated to $TAG and tag moved to new commit"
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "Version is already up to date"
          fi

      - name: Push tag
        if: steps.check_version.outputs.has_version_update != 'true' && steps.check_tag.outputs.has_tag != 'true' && steps.update_version.outputs.updated == 'true'
        run: |
          NEW_TAG=${{ steps.new_tag.outputs.new_tag }}
          git tag $NEW_TAG
          git push --tags
          git push
